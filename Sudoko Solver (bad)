#doesn't work all the time. will not be fixed!

import copy
import math
import sys
sys.setrecursionlimit(2000)

game=[]

for i in range(0,9):
    game.append(list(input()))
    for j in range(0,9):
        if game[i][j] == '0':
            game[i][j]=int(game[i][j])


def valid(board, sublist, itemloc, attempt):
    #converts all items on board to int
    board=copy.deepcopy(board)
    for i in range(0,9):
        for j in range(0,9):
            board[i][j]=int(board[i][j])
    attempt=int(attempt)
    if attempt > 9:
        return False

    #removes the value at the space being checked
    board[sublist][itemloc]=0

    if attempt in board[sublist]:
        return False

    column=[]
    for i in range(0,9):
        column.append(board[i][itemloc])
    if attempt in column:
        return False

    bin = []
    binx = math.floor(sublist / 3) * 3
    biny = math.floor(itemloc / 3) * 3
    for i in range(0, 3):
        for j in range(0, 3):
            bin.append(board[i + binx][j + biny])

    if attempt in bin:
        return False

    return True

def fixloc(sublist, itemloc):
    if itemloc < 0:
        sublist-=1
        itemloc=8
    if itemloc > 8:
        sublist+=1
        itemloc=0
    return [sublist, itemloc]

def solve(board, sublist, itemloc):
    if sublist==8 and itemloc==8:
        for i in range(1, 10):
            if valid(board, 8, 8, i):
                board[8][8]=i
                print(board)
                exit()
    if type(sublist) == list:
        sublist=sublist[0]
    if type(itemloc) == list:
        itemloc=itemloc[0]
    sublist=fixloc(sublist,itemloc)[0]
    itemloc=fixloc(sublist,itemloc)[1]

    if type(board[sublist][itemloc]) == str:
        solve(board, sublist, itemloc+1)

    board[sublist][itemloc]+=1
    while True:
        if valid(board, sublist, itemloc, board[sublist][itemloc]):
            solve(board, sublist, itemloc+1)
        else:
            if board[sublist][itemloc] < 9:
                board[sublist][itemloc] += 1
            else:
                board[sublist][itemloc]=0
                #find the most recent non string:
                recentloc=fixloc(sublist,itemloc-1)
                while True:
                    if type(board[recentloc[0]][recentloc[1]]) == str:
                        recentloc = fixloc(recentloc[0], recentloc[1]-1)
                    else:
                        solve(board, [recentloc[0]], [recentloc[1]])


solve(game,0,0)
